/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Logic.ComicEntry;
import Logic.ElementList;
import Logic.ElementProxy;
import Logic.Entry;
import Logic.ShowEntry;
import Logic.UserController;
import Logic.VideogameEntry;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.util.ArrayList;
import static java.util.Collections.list;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;

/**
 *
 * @author alex
 */
public class JPanelOtherHome extends javax.swing.JPanel {
   
    /**
     * Creates new form JPanelHome
     */
    public JPanelOtherHome(MainFrame mainFrame,JPanelSearchResults searchPanel, JPanelHome homePanel,JPanel mainPanel) {
        initComponents();
        this.homePanel=homePanel;
      this.searchPanel=searchPanel;
      this.mainPanel = mainPanel;
      
      jButton1.setText("Back");
      jButton2.setText("Home");
        ElementList[] lists=null;
        try {
            lists = UserController.getInstance().getLists();
        } catch (Exception ex) {
            Logger.getLogger(JPanelHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        setLists(lists);
        mainFrame.getPanel().repaint();
        mainFrame.getPanel().revalidate();
        mainFrame.pack();
        mainFrame.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        videogameButton = new javax.swing.JButton();
        comicButton = new javax.swing.JButton();
        showButton = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        videogameButton.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        videogameButton.setText("VIDEOGAMES");
        videogameButton.setBorderPainted(false);
        videogameButton.setContentAreaFilled(false);
        videogameButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                videogameButtonMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                videogameButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                videogameButtonMouseEntered(evt);
            }
        });

        comicButton.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        comicButton.setText("COMICS");
        comicButton.setBorderPainted(false);
        comicButton.setContentAreaFilled(false);
        comicButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                comicButtonMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                comicButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                comicButtonMouseEntered(evt);
            }
        });

        showButton.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        showButton.setText("SHOWS");
        showButton.setBorderPainted(false);
        showButton.setContentAreaFilled(false);
        showButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showButtonMouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showButtonMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showButtonMouseEntered(evt);
            }
        });

        java.awt.GridBagLayout panelLayout = new java.awt.GridBagLayout();
        panelLayout.columnWidths = new int[] {0, 5, 0};
        panelLayout.rowHeights = new int[] {0};
        panel.setLayout(panelLayout);

        jButton1.setText("jButton1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(videogameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(292, 292, 292)
                .addComponent(comicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(187, 187, 187))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(videogameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void videogameButtonMouseEntered(java.awt.event.MouseEvent evt) {                                             

        this.videogameButton.setForeground(Color.WHITE);
    }                                            

    private void videogameButtonMouseExited(java.awt.event.MouseEvent evt) {                                            

        this.videogameButton.setForeground(Color.BLACK);
    }                                           

    private void comicButtonMouseEntered(java.awt.event.MouseEvent evt) {                                         

        this.comicButton.setForeground(Color.WHITE);
    }                                        

    private void comicButtonMouseExited(java.awt.event.MouseEvent evt) {                                        

        this.comicButton.setForeground(Color.BLACK);
    }                                       

    private void showButtonMouseEntered(java.awt.event.MouseEvent evt) {                                        
     
        this.showButton.setForeground(Color.WHITE);
    }                                       

    private void showButtonMouseExited(java.awt.event.MouseEvent evt) {                                       
       
        this.showButton.setForeground(Color.BLACK);
    }                                      

    private void videogameButtonMouseReleased(java.awt.event.MouseEvent evt) {                                              
        printVideogameList();
        
        
    }                                             
   
    private void comicButtonMouseReleased(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
       printComicList();
    }                                         

    private void showButtonMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        printShowList();
        
    }                                        

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "Search");
    }                                      

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {                                       
        // TODO add your handling code here:
        ((CardLayout)mainPanel.getLayout()).show(mainPanel, "Home");
    }                                      

    private void createHeaders(String type, Insets ins){
        GridBagConstraints c=new GridBagConstraints();
       c.insets=ins;
        JLabel labelHeaders[];
        String headers[]=null;
        switch(type){
            case "Videogame":
                headers=headersVideogame;
                break;
            case "Show":
               headers=headersShow;
               break;
            case "Comic":
                headers=headersComic;
                break;
            
        }
        labelHeaders=new JLabel[headers.length];
        c.anchor=GridBagConstraints.NORTHWEST;
        //c.weighty=1;
        //c.weightx=1;
        c.gridy=0;
        
       for(int i=0;i<labelHeaders.length;i++){
           labelHeaders[i]= new JLabel(headers[i]);
           labelHeaders[i].setFont(new Font("Ubuntu",Font.PLAIN,19));
           c.gridx=i;
           panel.add(labelHeaders[i],c);
        }
       c.gridy=1;
    
       
     
           
    }
    
    public void setLists(ElementList[] lists){
        for(int i=0;i<lists.length;i++){
            if(lists[i].getTypeList().equalsIgnoreCase("Videogame")){
                videogameList= lists[i];
            }else if(lists[i].getTypeList().equalsIgnoreCase("Show")){
                showList= lists[i];
            }else if(lists[i].getTypeList().equalsIgnoreCase("Comic")){
                comicList= lists[i];
            }
        }
    }
    
    private void printComicList(){
          panel.removeAll();
      panel.repaint();
      panel.revalidate();
      Insets ins= new Insets(0, 100, 5, 5);
      createHeaders("Comic",ins);
      GridBagConstraints c=new GridBagConstraints();
      c.anchor=GridBagConstraints.NORTHWEST;
     // c.weighty=0.5;
      //c.weightx=0.5;
      
      c.insets=ins;
      
      List<ComicEntry> list=comicList.getEntryList();
      int size=list.size();
      int i;
      for( i=0;i<size;i++){ 
          ArrayList<CustomTextField> params=new ArrayList<CustomTextField>();
          ComicEntry entry=list.get(i);
         
          c.gridy=i+1;
          c.gridx=0;
          String param=entry.getName();
          CustomTextField t =new CustomTextField(entry.getName());
         
          t.setEditable(false);
          panel.add(t,c);
          c.gridx=1;
          
          CustomTextField t1=new CustomTextField(String.valueOf((int)entry.getValoration()));
          t1.setEditable(false);
          t1.setPreferredSize(new Dimension(30,20));
          params.add(t1);
       
          panel.add(t1,c);
          c.gridx=2;
          CustomTextField t2=new CustomTextField(entry.getStatus());
          t2.setEditable(false);
          panel.add(t2,c); 
          params.add(t2);
          c.gridx=3;
           CustomTextField t3=new CustomTextField(String.valueOf(entry.getNumReadChapters()));
          t3.setEditable(false);
           panel.add(t3,c); 
          params.add(t3);
        
      }
      JPanel filler=new JPanel();
      c.gridy++;
      c.weightx=1;
      c.weighty=1;
      panel.add(filler,c);
      panel.repaint();
      panel.revalidate();
      
    }
    
    private void printVideogameList(){
      panel.removeAll();
      panel.repaint();
      panel.revalidate();
      Insets ins=new Insets(0, 150, 5, 5);
      createHeaders("Videogame", ins);
      GridBagConstraints c=new GridBagConstraints();
      c.anchor=GridBagConstraints.NORTHWEST;
     // c.weighty=0.5;
      //c.weightx=0.5;
     
      c.insets= ins;
     
      List<VideogameEntry> list=videogameList.getEntryList();
      int size=list.size();
      int i;
      for( i=0;i<size;i++){ 
          ArrayList<CustomTextField> params=new ArrayList<CustomTextField>();
          VideogameEntry entry=list.get(i);
         
          c.gridy=i+1;
          c.gridx=0;
          String param=entry.getName();
          CustomTextField t =new CustomTextField(entry.getName());
         
          t.setEditable(false);
          panel.add(t,c);
          c.gridx=1;
          
          CustomTextField t1=new CustomTextField(String.valueOf((int)entry.getValoration()));
          t1.setPreferredSize(new Dimension(30,20));
          t1.setEditable(false);
          params.add(t1);
       
          panel.add(t1,c);
          c.gridx=2;
          CustomTextField t2=new CustomTextField(entry.getStatus());
          t2.setEditable(false);
          panel.add(t2,c); 
          params.add(t2);
        
      }
      JPanel filler=new JPanel();
      c.gridy++;
      c.weightx=1;
      c.weighty=1;
      panel.add(filler,c);
      panel.repaint();
      panel.revalidate();
    }
    private void printShowList(){
         panel.removeAll();
      panel.repaint();
      panel.revalidate();
      Insets ins= new Insets(0, 120, 5, 5);
      createHeaders("Show",ins);
      GridBagConstraints c=new GridBagConstraints();
      c.anchor=GridBagConstraints.NORTHWEST;
     // c.weighty=0.5;
      //c.weightx=0.5;
  
       
      c.insets=ins;
    
      List<ShowEntry> list=showList.getEntryList();
     
      int size=list.size();
      int i;
      for( i=0;i<size;i++){ 
          ArrayList<CustomTextField> params=new ArrayList<CustomTextField>();
          ShowEntry entry=list.get(i);
         
          c.gridy=i+1;
          c.gridx=0;
          String param=entry.getName();
 
          CustomTextField t =new CustomTextField(entry.getName());
         
          t.setEditable(false);
          panel.add(t,c);
          c.gridx=1;
          
          CustomTextField t1=new CustomTextField(String.valueOf((int)entry.getValoration()));
          t1.setEditable(false);
          t1.setPreferredSize(new Dimension(30,20));
          
          params.add(t1);
       
          panel.add(t1,c);
          c.gridx=2;
          CustomTextField t2=new CustomTextField(entry.getStatus());
          t2.setEditable(false);
          panel.add(t2,c); 
          params.add(t2);
          c.gridx=3;
           CustomTextField t3=new CustomTextField(String.valueOf(entry.getNumWatchedEpisodes()));
         t3.setEditable(false);
           panel.add(t3,c); 
          params.add(t3);
       
      }
      JPanel filler=new JPanel();
      c.gridy++;
      c.weightx=1;
      c.weighty=1;
      panel.add(filler,c);
      panel.repaint();
      panel.revalidate();
    }
    
    JPanel mainPanel;
    JPanelHome homePanel;
    JPanelSearchResults searchPanel;
    final String headersVideogame []={"Name", "Valoration", "Status"};
    final String headersShow []={"Name", "Valoration", "Status", "Watched"};
    final String headersComic []={"Name", "Valoration", "Status", "Read"};
    ElementList<VideogameEntry> videogameList;
    ElementList<ComicEntry> comicList;
    ElementList<ShowEntry> showList;
 
    // Variables declaration - do not modify                     
    private javax.swing.JButton comicButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel panel;
    private javax.swing.JButton showButton;
    private javax.swing.JButton videogameButton;
    // End of variables declaration                   
}
